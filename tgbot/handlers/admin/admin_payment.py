# - *- coding: utf- 8 - *-
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.data.loader import dp
from tgbot.keyboards.inline_admin import payment_choice_finl
from tgbot.services.api_qiwi import QiwiAPI
from tgbot.services.api_sqlite import update_paymentx, get_paymentx, add_userx
from tgbot.utils.misc.bot_filters import IsAdmin


###################################################################################
############################# –í–´–ë–û–† –°–ü–û–°–û–ë–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø ############################
# –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üñ≤ –°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", state="*")
async def payment_systems(message: Message, state: FSMContext):
    await state.finish()

    await message.answer("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>", reply_markup=payment_choice_finl())


# –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="change_payment:")
async def payment_systems_edit(call: CallbackQuery):
    way_pay = call.data.split(":")[1]
    way_status = call.data.split(":")[2]

    get_payment = get_paymentx()

    if get_payment['binance_login'] != "None" and get_payment['binance_token'] != "None" or way_status == "False":
        if way_pay == "Binance":
            if get_payment['binance_secret'] != "None" or way_status == "False":
                update_paymentx(way_binance=way_status)
            else:
                return await call.answer(
                    "‚ùó –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ Binance –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
                    True)
        elif way_pay == "USDT":
            update_paymentx(way_usdt_trc20=way_status)
        elif way_pay == "Monobank":
            if status:
                update_paymentx(way_monobank=way_status)
            else:
                return await call.answer(response, True)
    else:
        return await call.answer("‚ùó –î–æ–±–∞–≤—å—Ç–µ Binance –∫–æ—à–µ–ª—ë–∫ –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –°–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π", True)

    await call.message.edit_text("<b>üñ≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>", reply_markup=payment_choice_finl())


###################################################################################
####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å Binance üñç", state="*")
async def payment_qiwi_edit(message: Message, state: FSMContext):
    await state.finish()

    await state.set_state("here_qiwi_login")
    await message.answer("<b>üí∞ –í–≤–µ–¥–∏—Ç–µ  Binance Pay ID –∫–æ—à–µ–ª—å–∫–∞ üñç</b>")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ QIWI
@dp.message_handler(IsAdmin(), text="üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Binance ‚ôª", state="*")
async def payment_qiwi_check(message: Message, state: FSMContext):
    await state.finish()

    await QiwiAPI(message, pass_check=True).pre_checker()


# –ë–∞–ª–∞–Ω—Å QIWI

@dp.message_handler(IsAdmin(), text="add_userx", state="*")
async def testtok(message: Message, state: FSMContext):
    await state.finish()

    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")
    add_userx("1212312", "user_login", "user_name")
    add_userx("231321", "user_login", "user_name")



@dp.message_handler(IsAdmin(), text="üí∞ –ë–∞–ª–∞–Ω—Å Binance üëÅ", state="*")
async def payment_qiwi_balance(message: Message, state: FSMContext):
    await state.finish()

    await QiwiAPI(message).balance()

@dp.message_handler(IsAdmin(), text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å USDT üñç", state="*")
async def payment_qiwi_balance(message: Message, state: FSMContext):
    await state.set_state("here_usdt_trc20")
    await message.answer(
        "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ <code>USDT-TRC20</code> –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n",
        disable_web_page_preview=True
    )

@dp.message_handler(IsAdmin(), state="here_usdt_trc20")
async def payment_qiwi_edit_login(message: Message, state: FSMContext):
    update_paymentx(usdt_trc20=message.text)
    await state.finish()
    await message.answer(
        "<b>üñç –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ USDT-TRC20 –∞–¥—Ä–µ—Å ‚úÖ</b>\n",
        disable_web_page_preview=True
    )


######################################## USDT TRC20 ###########################################
#update_paymentx(usdt_trc20=)
######################################## –ü–†–ò–ù–Ø–¢–ò–ï QIWI ########################################
# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_qiwi_login")
async def payment_qiwi_edit_login(message: Message, state: FSMContext):
    await state.update_data(here_qiwi_login=message.text)

    await state.set_state("here_qiwi_token")
    await message.answer(
        "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ <code>Public key</code> Binance –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n"
        "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://www.binance.com/en/my/settings/api-management'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
        "‚ùï –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.",
        disable_web_page_preview=True
    )



# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_qiwi_token")
async def payment_qiwi_edit_token(message: Message, state: FSMContext):
    await state.update_data(here_qiwi_token=message.text)

    await state.set_state("here_qiwi_secret")
    await message.answer(
        "<b>üí∞ –í–≤–µ–¥–∏—Ç–µ <code>Secret key üñç</code></b>\n"
        "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://www.binance.com/en/my/settings/api-management'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n",
        disable_web_page_preview=True
    )


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è QIWI
@dp.message_handler(IsAdmin(), state="here_qiwi_secret")
async def payment_qiwi_edit_secret(message: Message, state: FSMContext):
    async with state.proxy() as data:
        binance_login = data['here_qiwi_login']
        binance_token = data['here_qiwi_token']
        binance_secret = message.text

    await state.finish()

    cache_message = await message.answer("<b>üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ API Binance –∫–æ—à–µ–ª—å–∫–∞ ... üîÑ</b>")
    await QiwiAPI(cache_message, binance_login, binance_token, binance_secret, True).pre_checker()
